// Type definitions for the worksheet generator

export type WorksheetType = 'text' | 'letters' | 'alphabet' | 'numbers';
export type AlphabetCase = 'uppercase' | 'lowercase' | 'both';
export type PaperSize = 'a4' | 'letter' | 'legal' | 'a5';
export type GuidelineStyle = 'standard' | 'elementary' | 'dotted' | 'double';
export type FontCategory = 'all' | 'educational' | 'handwriting' | 'cursive' | 'display' | 'serif' | 'sansSerif' | 'monospace' | 'arabic';
export type GuidelineColorStyle = 'default' | 'rainbow' | 'pastel' | 'monochrome';
export type TextTraceStyle = 'dotted' | 'dashed' | 'outline' | 'solid';
export type CharacterWidth = 'condensed' | 'normal' | 'expanded';
export type VerticalAlignment = 'top' | 'center' | 'baseline';
export type TextCase = 'none' | 'uppercase' | 'lowercase' | 'titlecase';
export type SightWordList = 'dolch-preprimer' | 'dolch-primer' | 'dolch-first' | 'dolch-second' | 'dolch-third' | 'fry-first100' | 'fry-second100' | 'fry-third100';
export type WordPattern = 'cvc' | 'cvce' | 'ccvc' | 'cvcc' | 'digraph' | 'vowelTeam';
export type DifficultyLevel = 'easy' | 'medium' | 'hard';

export interface PageConfig {
  id: string;
  worksheetType: WorksheetType;
  text: string;
  specificLetters: string;
  alphabetCase: AlphabetCase;
  includeNumbers: boolean;
  includeSymbols: boolean;
  emptyPaper: boolean;
  repeatText: boolean;
}

export interface GuidelineOpacities {
  top: number;
  middle: number;
  baseline: number;
  bottom: number;
}

export interface CustomGuidelineColors {
  top: string;
  middle: string;
  baseline: string;
  bottom: string;
}

export interface WorksheetPreferences {
  // Global settings
  fontSize: number;
  lineCount: number;
  selectedFont: string;
  showGuides: boolean;
  fontCategory: FontCategory;
  paperSize: PaperSize;
  guidelineStyle: GuidelineStyle;
  guidelineThickness: number;
  fullMarginGuides: boolean;
  textOpacity: number;
  guidelineOpacity: number;
  guidelineColorStyle: GuidelineColorStyle;
  textTraceStyle: TextTraceStyle;
  letterSpacing: number;
  showStartingDots: boolean;
  showStrokeArrows: boolean;
  showPageNumbers: boolean;
  showFooter: boolean;
  footerText: string; // Fixed value: "Generated by InkTrace" - not user-editable
  
  // Text formatting
  wordSpacing: number;
  characterWidth: CharacterWidth;
  verticalAlignment: VerticalAlignment;
  textCase: TextCase;
  
  // Enhanced guideline options
  useCustomGuidelineColors: boolean;
  customGuidelineColors: CustomGuidelineColors;
  guidelineOpacities: GuidelineOpacities;
  dashedGuidelines: boolean;
  showMarginLines: boolean;
  emphasizeBaseline: boolean;
  baselineThickness: number;

  // Content generation
  contentGeneration: ContentGenerationSettings;

  // Multi-page mode
  multiPageMode: boolean;
  pages: PageConfig[];

  // Legacy single-page settings (for backward compatibility)
  text: string;
  pageCount: number;
  dottedFont: boolean;
  worksheetType: WorksheetType;
  specificLetters: string;
  alphabetCase: AlphabetCase;
  includeNumbers: boolean;
  includeSymbols: boolean;
  emptyPaper: boolean;
  repeatText: boolean;
}

export interface PaperSizeConfig {
  width: number;
  height: number;
  label: string;
}

export interface GuidelineStyleConfig {
  label: string;
  lines: number;
  dottedMiddle: boolean;
}

export interface FooterConfig {
  showBranding: boolean; // Shows "Generated by InkTrace" (fixed text)
  showPagination: boolean; // Shows page numbers
}

export interface ExportOptions {
  dpi: number;
  includeFooter: boolean;
  footerConfig?: FooterConfig;
  paperSize: PaperSize;
}

export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings?: string[];
}

export interface WorksheetPreset {
  name: string;
  description: string;
  icon?: string;
  preferences: Partial<WorksheetPreferences>;
}

export interface LineSpacingConfig {
  value: number;
  label: string;
  description?: string;
}

export interface GuidelineColorConfig {
  style: GuidelineColorStyle;
  colors: string[];
  label: string;
}

export interface ContentGenerationSettings {
  sightWordList?: SightWordList;
  wordPattern?: WordPattern;
  customWordList: string[];
  useNamePractice: boolean;
  practiceName: string;
  useSentenceTemplate: boolean;
  sentenceTemplate: string;
  randomWordDifficulty?: DifficultyLevel;
  randomWordCount: number;
}
